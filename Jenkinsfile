pipeline {
    agent any

    environment {
        // Airflow kont√©ner neve √©s DAG el√©r√©si √∫t
        AIRFLOW_CONTAINER = "airflow-webserver"  // Ellen≈ërizd a kont√©ner nev√©t!
        DAG_PATH = "/opt/airflow/dags"          // Ellen≈ërizd, hogy ez a helyes el√©r√©si √∫t!
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Git repository kl√≥noz√°sa (√∫jrapr√≥b√°lkoz√°ssal)
                retry(3) {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [[$class: 'CleanCheckout']], // Tiszta munkater√ºlet
                        userRemoteConfigs: [[url: 'https://github.com/devbear90/cicd_demo.git']]
                    ])
                }
            }
        }

        stage('Deploy DAGs') {
            steps {
                script {
                    // DAG f√°jlok m√°sol√°sa az Airflow kont√©nerbe
                    sh """
                        docker cp ./dags/ ${AIRFLOW_CONTAINER}:${DAG_PATH}/
                        echo "‚úÖ DAG-ok sikeresen deployolva!"
                    """
                }
            }
        }

        stage('Restart Scheduler (Optional)') {
            steps {
                // Airflow scheduler √∫jraind√≠t√°sa (ha sz√ºks√©ges)
                sh "docker restart airflow-scheduler"
            }
        }
    }

    post {
        always {
            cleanWs() // Munkater√ºlet automatikus t√∂rl√©se
        }
        success {
            echo "üéâ CI/CD Sikeres!"
        }
        failure {
            echo "‚ùå CI/CD Sikertelen!"
        }
    }
}